# Set R1, R2, R3 and R4 as 0
# R1 -> red
# R2 -> green
# R3 -> blue
# R4 -> trans

SUMI R1, R0, 0
SUMI R2, R0, 0
SUMI R3, R0, 0
SUMI R4, R0, 0

# Define value of R1 -> red, based on the bits of red. Those are located at mem dir 100 500
# R5 -> Red1
# R6 -> Red0

SUM R5, R0, 150000
SUMI R5, R5, 151000
CRG R5, 0(R5)
SUM R6, R0, 150000
SUMI R6, R6, 151001
CRG R6, 0(R6)

SCD R5, R0, _red1_one
SCD R6, R0, _red0_one
SUMI R1, R0, 0
SI _red_end
_red1_one:
SCD R6, R0, _red1_0_one
SUMI R1, R0, 191
SI _red_end
_red1_0_one:
SUMI R1, R0, 255
SI _red_end
_red0_one:
SUMI R1, R0, 63
_red_end:

# guardar en memoria
SUMI R10, R0, 150000
SUMI R10, R10, 151009
GRD R1, 0(R10)
SUMI R10, R10, 3
GRD R1, 0(R10)

# Define value of R2 -> green, based on the bits of green. Those are located at mem dir 100 502
# R5 -> Green1
# R6 -> Green0

SUMI R5, R0, 150000
SUMI R5, R5, 151002
CRG R5, 0(R5)
SUMI R6, R0, 150000
SUMI R6, R6, 151003
CRG R6, 0(R6)

SCD R5, R0, _green1_one
SCD R6, R0, _green0_one
SUMI R2, R0, 0
SI _green_end
_green1_one:
SCD R6, R0, _green1_0_one
SUMI R2, R0, 191
SI _green_end
_green1_0_one:
SUMI R2, R0, 255
SI _green_end
_green0_one:
SUMI R2, R0, 63
_green_end:

# guardar en memoria
SUMI R10, R0, 150000
SUMI R10, R10, 151010
GRD R2, 0(R10)
SUMI R10, R10, 3
GRD R2, 0(R10)

# Define value of R3 -> blue, based on the bits of blue. Those are located at mem dir 100 504
# R5 -> Blue1
# R6 -> Blue0

SUMI R5, R0, 150000
SUMI R5, R5, 151004
CRG R5, 0(R5)
SUMI R6, R0, 150000
SUMI R6, R6, 151005
CRG R6, 0(R6)

SCD R5, R0, _blue1_one
SCD R6, R0, _blue0_one
SUMI R3, R0, 0
SI _blue_end
_blue1_one:
SCD R6, R0, _blue1_0_one
SUMI R3, R0, 191
SI _blue_end
_blue1_0_one:
SUMI R3, R0, 255
SI _blue_end
_blue0_one:
SUMI R3, R0, 63
_blue_end:

# guardar en memoria
SUMI R10, R0, 150000
SUMI R10, R10, 151011
GRD R3, 0(R10)
SUMI R10, R10, 3
GRD R3, 0(R10)

# Define value of R4 -> trans, based on the bits of trans. Those are located at mem dir 100 506
# R5 -> Trans1
# R6 -> Trans0

SUMI R5, R0, 150000
SUMI R5, R5, 151006
CRG R5, 0(R5)
SUMI R6, R0, 150000
SUMI R6, R6, 151007
CRG R6, 0(R6)

SCD R5, R0, _trans1_one
SCD R6, R0, _trans0_one
SUMI R4, R0, 0
SI _trans_end
_trans1_one:
SCD R6, R0, _trans1_0_one
SUMI R4, R0, 191
SI _trans_end
_trans1_0_one:
SUMI R4, R0, 255
SI _trans_end
_blue0_one:
SUMI R4, R0, 63
_trans_end:

# Now R5 -> type, based on the switch value. This is located at mem dir 100508
SUMI R5, R0, 150000
SUMI R5, R5, 151008
CRG R5, 0(R5)

# Define the filter to apply
SCD R5, R0, _center_fil

# Vertical filter on image
_vert_fil:

# initialization of red_step, green_step and blue_step. Consider IMAGE_SIZE_Y = 200 and IMAGE_SIZE_X = 250
# R5 -> red_step = red // IMAGE_SIZE_Y
# R6 -> green_step = green // IMAGE_SIZE_Y
# R7 -> blue_step = blue // IMAGE_SIZE_Y

SUMI R5, R0, 1
SUMI R6, R0, 1
SUMI R7, R0, 1

# External for to iterate the image row
# R8 will keep the row iterable register
# R10 will keep the amount of rows in image
SUMI R8, R0, 0
_vert_loop_rows:
SUMI R10, R0, 200
SCI R8, R10, _end_vert_loop_rows

# Internal for to iterate the image columns
# R9 will keep the column iterable register
# R10 will keep the amount of columns in image
SUMI R9, R0, 0
_vert_loop_columns:
SUMI R10, R0, 250
SCI R9, R10, _end_vert_loop_columns

# Carga el registro vectorial RV1 de la lista imagen R12 contiene la direcci√≥n relativa a la imagen
MULI R10, R8, 250
MULI R10, R10, 3
MULI R11, R9, 3
SUM R12, R10, R11
SUM R10, R12, 1000
CRGV RV1, 0(R10)

# Carga el registro vectorial RV2 con valores de color
SUMI R10, R0, 150000
SUMI R10, R10, 151009
CRGV RV2, 0(R10)

MULEV RV2, RV2, R4
SUMI R10, R0, 255
DIVEV RV2, RV2, R10

SUMI R10, R0, 255
RESI R10, R10, R4
MULEV RV1, RV1, R10
SUMI R10, R0, 255
DIVEV RV1, RV1, R10

SUMV RV3, RV1, RV2

SUM R10, R12, 151000
GRDV RV3, 0(R10)

# Carga el registro de los colores

SUMI R9, R9, 1
SI _vert_loop_columns
_end_vert_loop_columns:

# Update the value of red (R1), green (R2) and blue (R3)
#    with the values of red_step (R5), green_step (R6) and blue_step (R7)
RES R1, R1, R5
# guardar en memoria
SUMI R10, R0, 150000
SUMI R10, R10, 151009
GRD R1, 0(R10)
SUMI R10, R10, 3
GRD R1, 0(R10)

RES R2, R2, R6
# guardar en memoria
SUMI R10, R0, 150000
SUMI R10, R10, 151010
GRD R2, 0(R10)
SUMI R10, R10, 3
GRD R2, 0(R10)

RES R3, R3, R7
# guardar en memoria
SUMI R10, R0, 150000
SUMI R10, R10, 151011
GRD R3, 0(R10)
SUMI R10, R10, 3
GRD R3, 0(R10)

SUMI R8, R8, 1
SI _vert_loop_rows
_end_vert_loop_rows:

SI end

# Center filter on image
_center_fil:
end:
